from flask import Flask, render_template, request, jsonify
from datetime import datetime, timedelta
import pytz
import math
import json
import os
from vedic_calculator.core import VedicCalculator

app = Flask(__name__)

# Load cities database
with open(os.path.join(os.path.dirname(__file__), 'data', 'custom_cities.json'), 'r', encoding='utf-8') as f:
    CITIES_DB = json.load(f)

# Path to stored kundlis
KUNDLIS_FILE = os.path.join(os.path.dirname(__file__), 'data', 'stored_kundlis.json')

def load_stored_kundlis():
    if os.path.exists(KUNDLIS_FILE):
        with open(KUNDLIS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {"kundlis": []}

def save_kundli(kundli_data):
    stored = load_stored_kundlis()
    
    # Check if kundli with same name exists
    for idx, k in enumerate(stored['kundlis']):
        if k['name'] == kundli_data['name']:
            stored['kundlis'][idx] = kundli_data
            break
    else:
        stored['kundlis'].append(kundli_data)
    
    with open(KUNDLIS_FILE, 'w', encoding='utf-8') as f:
        json.dump(stored, f, indent=4)

def search_cities(query):
    """Search cities in our database"""
    query = query.lower()
    matches = []
    for city in CITIES_DB['cities']:
        if query in city['name'].lower():
            matches.append({
                'name': city['display'],
                'lat': city['lat'],
                'lon': city['lon'],
                'timezone': city['timezone']
            })
    return matches[:10]  # Limit to 10 results for better performance

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/search_place', methods=['GET'])
def search_place():
    query = request.args.get('q', '')
    if len(query) < 2:
        return jsonify([])
    locations = search_cities(query)
    return jsonify(locations)

@app.route('/get_saved_kundlis', methods=['GET'])
def get_saved_kundlis():
    stored = load_stored_kundlis()
    return jsonify(stored)

@app.route('/calculate', methods=['POST'])
def calculate_kundli():
    try:
        data = request.json
        birth_date = datetime.strptime(data['date'], '%Y-%m-%d')
        birth_time = datetime.strptime(data['time'], '%H:%M').time()
        birth_datetime = datetime.combine(birth_date, birth_time)
        
        # Convert to UTC
        local_tz = pytz.timezone(data.get('timezone', 'UTC'))
        local_dt = local_tz.localize(birth_datetime)
        utc_dt = local_dt.astimezone(pytz.UTC)
        
        # Create calculator
        calc = VedicCalculator(
            utc_dt,
            data.get('latitude', 0),
            data.get('longitude', 0)
        )
        
        # Calculate all planet positions
        result = calc.calculate_all_planets()
        
        # Calculate house cusps
        house_cusps = calc.get_house_cusps()
        
        # Format response
        response = {
            'planets': result,
            'houses': [float(cusp) for cusp in house_cusps],
            'ayanamsa': calc._calculate_lahiri_ayanamsa()
        }
        
        # Save if name provided
        if 'name' in data:
            save_data = {
                'name': data['name'],
                'date': data['date'],
                'time': data['time'],
                'latitude': data.get('latitude', 0),
                'longitude': data.get('longitude', 0),
                'timezone': data.get('timezone', 'UTC'),
                'results': response
            }
            save_kundli(save_data)
        
        return jsonify(response)
        
    except Exception as e:
        return jsonify({'error': str(e)}), 400

if __name__ == '__main__':
    app.run(debug=True)
