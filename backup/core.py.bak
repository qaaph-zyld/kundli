"""
Core astronomical calculations for Vedic astrology
"""
from datetime import datetime
import math
from functools import lru_cache
from typing import Dict, Tuple, List
import swisseph as swe

class VedicCalculator:
    """
    Core calculator class for Vedic astrology calculations using Lahiri ayanamsa
    """
    # Zodiac signs in order
    ZODIAC_SIGNS = [
        'Aries', 'Taurus', 'Gemini', 'Cancer', 'Leo', 'Virgo',
        'Libra', 'Scorpio', 'Sagittarius', 'Capricorn', 'Aquarius', 'Pisces'
    ]
    
    # Planet dignities
    EXALTATION = {
        'Sun': 'Aries',
        'Moon': 'Taurus',
        'Mars': 'Capricorn',
        'Jupiter': 'Cancer',
        'Venus': 'Pisces',
        'Saturn': 'Libra'
    }
    
    DEBILITATION = {
        'Sun': 'Libra',
        'Moon': 'Scorpio',
        'Mars': 'Cancer',
        'Jupiter': 'Capricorn',
        'Venus': 'Virgo',
        'Saturn': 'Aries'
    }

    # Swiss Ephemeris planet constants
    PLANET_CONSTANTS = {
        'Sun': swe.SUN,
        'Moon': swe.MOON,
        'Mars': swe.MARS,
        'Jupiter': swe.JUPITER,
        'Venus': swe.VENUS,
        'Saturn': swe.SATURN
    }
    
    def __init__(self, date: datetime, lat: float = 0.0, lon: float = 0.0):
        """
        Initialize calculator with date, time and location
        
        Args:
            date: Datetime object in UTC
            lat: Latitude in degrees (North positive)
            lon: Longitude in degrees (East positive)
        """
        self.date = date
        self.lat = float(lat)
        self.lon = float(lon)
        
        # Set Lahiri (Indian) ayanamsa
        swe.set_sid_mode(swe.SIDM_LAHIRI)
        
        # Convert datetime to Julian day
        self.julian_day = swe.julday(
            date.year,
            date.month,
            date.day,
            date.hour + date.minute/60.0 + date.second/3600.0
        )

    def _calculate_lahiri_ayanamsa(self) -> float:
        """
        Calculate Lahiri ayanamsa for the given date
        
        Returns:
            float: Ayanamsa value in degrees
        """
        return swe.get_ayanamsa(self.julian_day)

    def _normalize_longitude(self, longitude: float) -> float:
        """Normalize longitude to 0-360 range"""
        longitude = longitude % 360
        if longitude < 0:
            longitude += 360
        return longitude

    @lru_cache(maxsize=128)
    def get_planet_position(self, planet_name: str) -> Tuple[float, str]:
        """
        Calculate sidereal position of a planet
        
        Args:
            planet_name: Name of the planet (Sun, Moon, Mars, etc.)
            
        Returns:
            Tuple[float, str]: (longitude in degrees, zodiac sign name)
        """
        # Get planet constant
        planet_id = self.PLANET_CONSTANTS[planet_name]
        
        # Calculate planet position
        flags = swe.FLG_SWIEPH | swe.FLG_SIDEREAL
        xx, ret = swe.calc_ut(self.julian_day, planet_id, flags)
        
        # Get longitude from first element
        long_deg = float(xx[0])
        
        # Normalize longitude
        long_deg = self._normalize_longitude(long_deg)
        
        # Calculate zodiac sign
        sign_num = int(long_deg / 30)
        sign = self.ZODIAC_SIGNS[sign_num]
        
        return (long_deg, sign)

    def get_house_cusps(self) -> List[float]:
        """
        Calculate house cusps using equal house system
        
        Returns:
            List[float]: List of 12 house cusp longitudes
        """
        # Calculate ascendant first
        flags = swe.FLG_SWIEPH | swe.FLG_SIDEREAL
        ascendant = swe.houses(
            self.julian_day,
            self.lat,
            self.lon,
            b'E'  # Equal house system
        )[0][0]  # First house cusp
        
        # In equal house system, each house is exactly 30Â° apart
        house_cusps = []
        for i in range(12):
            cusp = self._normalize_longitude(ascendant + (i * 30))
            house_cusps.append(cusp)
            
        return house_cusps

    def get_planet_dignity(self, planet_name: str) -> str:
        """
        Determine dignity state of a planet
        
        Args:
            planet_name: Name of the planet
            
        Returns:
            str: Dignity state (exalted, debilitated, neutral)
        """
        _, sign = self.get_planet_position(planet_name)
        
        if planet_name in self.EXALTATION and sign == self.EXALTATION[planet_name]:
            return 'exalted'
        elif planet_name in self.DEBILITATION and sign == self.DEBILITATION[planet_name]:
            return 'debilitated'
        return 'neutral'

    def calculate_all_planets(self) -> Dict[str, Dict[str, str]]:
        """
        Calculate positions for all major planets
        
        Returns:
            Dict with planet positions and dignities
        """
        result = {}
        
        for planet in self.PLANET_CONSTANTS.keys():
            long_deg, sign = self.get_planet_position(planet)
            dignity = self.get_planet_dignity(planet)
            
            result[planet] = {
                'longitude': f"{long_deg:.2f}",
                'sign': sign,
                'dignity': dignity,
                'degree': f"{long_deg % 30:.2f}"
            }
            
        return result
