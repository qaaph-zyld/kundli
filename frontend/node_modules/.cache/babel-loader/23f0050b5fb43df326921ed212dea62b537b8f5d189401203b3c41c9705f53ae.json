{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  date: new Date().toISOString().split('T')[0],\n  time: new Date().toTimeString().split(' ')[0],\n  latitude: null,\n  longitude: null,\n  city: '',\n  timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n  loading: false,\n  error: null,\n  chartData: null\n};\nexport const kundliSlice = createSlice({\n  name: 'kundli',\n  initialState,\n  reducers: {\n    setDate: (state, action) => {\n      state.date = action.payload;\n    },\n    setTime: (state, action) => {\n      state.time = action.payload;\n    },\n    setLocation: (state, action) => {\n      state.latitude = action.payload.lat;\n      state.longitude = action.payload.lon;\n      state.city = action.payload.city;\n      state.timezone = action.payload.timezone;\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n    },\n    setChartData: (state, action) => {\n      state.chartData = action.payload;\n    }\n  }\n});\nexport const {\n  setDate,\n  setTime,\n  setLocation,\n  setLoading,\n  setError,\n  setChartData\n} = kundliSlice.actions;\nexport default kundliSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","date","Date","toISOString","split","time","toTimeString","latitude","longitude","city","timezone","Intl","DateTimeFormat","resolvedOptions","timeZone","loading","error","chartData","kundliSlice","name","reducers","setDate","state","action","payload","setTime","setLocation","lat","lon","setLoading","setError","setChartData","actions","reducer"],"sources":["C:/Users/cc/CascadeProjects/kundli_service/frontend/src/store/kundliSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface KundliState {\n  date: string;\n  time: string;\n  latitude: number | null;\n  longitude: number | null;\n  city: string;\n  timezone: string;\n  loading: boolean;\n  error: string | null;\n  chartData: any | null; // We'll type this properly once we know the exact structure\n}\n\nconst initialState: KundliState = {\n  date: new Date().toISOString().split('T')[0],\n  time: new Date().toTimeString().split(' ')[0],\n  latitude: null,\n  longitude: null,\n  city: '',\n  timezone: Intl.DateTimeFormat().resolvedOptions().timeZone,\n  loading: false,\n  error: null,\n  chartData: null,\n};\n\nexport const kundliSlice = createSlice({\n  name: 'kundli',\n  initialState,\n  reducers: {\n    setDate: (state, action: PayloadAction<string>) => {\n      state.date = action.payload;\n    },\n    setTime: (state, action: PayloadAction<string>) => {\n      state.time = action.payload;\n    },\n    setLocation: (state, action: PayloadAction<{ lat: number; lon: number; city: string; timezone: string }>) => {\n      state.latitude = action.payload.lat;\n      state.longitude = action.payload.lon;\n      state.city = action.payload.city;\n      state.timezone = action.payload.timezone;\n    },\n    setLoading: (state, action: PayloadAction<boolean>) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action: PayloadAction<string | null>) => {\n      state.error = action.payload;\n    },\n    setChartData: (state, action: PayloadAction<any>) => {\n      state.chartData = action.payload;\n    },\n  },\n});\n\nexport const {\n  setDate,\n  setTime,\n  setLocation,\n  setLoading,\n  setError,\n  setChartData,\n} = kundliSlice.actions;\n\nexport default kundliSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAc7D,MAAMC,YAAyB,GAAG;EAChCC,IAAI,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC5CC,IAAI,EAAE,IAAIH,IAAI,CAAC,CAAC,CAACI,YAAY,CAAC,CAAC,CAACF,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;EAC7CG,QAAQ,EAAE,IAAI;EACdC,SAAS,EAAE,IAAI;EACfC,IAAI,EAAE,EAAE;EACRC,QAAQ,EAAEC,IAAI,CAACC,cAAc,CAAC,CAAC,CAACC,eAAe,CAAC,CAAC,CAACC,QAAQ;EAC1DC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE,IAAI;EACXC,SAAS,EAAE;AACb,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGnB,WAAW,CAAC;EACrCoB,IAAI,EAAE,QAAQ;EACdnB,YAAY;EACZoB,QAAQ,EAAE;IACRC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAA6B,KAAK;MACjDD,KAAK,CAACrB,IAAI,GAAGsB,MAAM,CAACC,OAAO;IAC7B,CAAC;IACDC,OAAO,EAAEA,CAACH,KAAK,EAAEC,MAA6B,KAAK;MACjDD,KAAK,CAACjB,IAAI,GAAGkB,MAAM,CAACC,OAAO;IAC7B,CAAC;IACDE,WAAW,EAAEA,CAACJ,KAAK,EAAEC,MAAmF,KAAK;MAC3GD,KAAK,CAACf,QAAQ,GAAGgB,MAAM,CAACC,OAAO,CAACG,GAAG;MACnCL,KAAK,CAACd,SAAS,GAAGe,MAAM,CAACC,OAAO,CAACI,GAAG;MACpCN,KAAK,CAACb,IAAI,GAAGc,MAAM,CAACC,OAAO,CAACf,IAAI;MAChCa,KAAK,CAACZ,QAAQ,GAAGa,MAAM,CAACC,OAAO,CAACd,QAAQ;IAC1C,CAAC;IACDmB,UAAU,EAAEA,CAACP,KAAK,EAAEC,MAA8B,KAAK;MACrDD,KAAK,CAACP,OAAO,GAAGQ,MAAM,CAACC,OAAO;IAChC,CAAC;IACDM,QAAQ,EAAEA,CAACR,KAAK,EAAEC,MAAoC,KAAK;MACzDD,KAAK,CAACN,KAAK,GAAGO,MAAM,CAACC,OAAO;IAC9B,CAAC;IACDO,YAAY,EAAEA,CAACT,KAAK,EAAEC,MAA0B,KAAK;MACnDD,KAAK,CAACL,SAAS,GAAGM,MAAM,CAACC,OAAO;IAClC;EACF;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EACXH,OAAO;EACPI,OAAO;EACPC,WAAW;EACXG,UAAU;EACVC,QAAQ;EACRC;AACF,CAAC,GAAGb,WAAW,CAACc,OAAO;AAEvB,eAAed,WAAW,CAACe,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}